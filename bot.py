"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–¶–∏—Ñ—Ä–æ–≤–æ–π –¢–æ—Ä–∂–æ–∫—ä"."""

from __future__ import annotations

import json
import logging
import os
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (Application, CallbackQueryHandler, CommandHandler,
                          ContextTypes)
from telegram.error import TelegramError

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


@dataclass(frozen=True)
class Attraction:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""

    identifier: str
    name: str
    description: str
    address: str
    latitude: float
    longitude: float
    image_url: str

    @property
    def map_link(self) -> str:
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å —Ç–æ—á–∫–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

        return (
            "https://yandex.ru/maps/?" f"pt={self.longitude},{self.latitude}&z=16&l=map"
        )

    @property
    def route_link(self) -> str:
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ç–æ—á–∫–∏."""

        return (
            "https://yandex.ru/maps/?"
            f"rtext=~{self.latitude}%2C{self.longitude}&rtt=auto"
        )


class AttractionStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö."""

    def __init__(self, items: List[Attraction]) -> None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        self._items: Dict[str, Attraction] = {item.identifier: item for item in items}

    @classmethod
    def from_json(cls, path: Path) -> "AttractionStorage":
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""

        if not path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

        with path.open("r", encoding="utf-8") as fh:
            payload = json.load(fh)

        attractions = [
            Attraction(
                identifier=item["id"],
                name=item["name"],
                description=item["description"],
                address=item["address"],
                latitude=float(item["coordinates"]["lat"]),
                longitude=float(item["coordinates"]["lon"]),
                image_url=item["image_url"],
            )
            for item in payload
        ]
        return cls(attractions)

    def all(self) -> List[Attraction]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π."""

        return list(self._items.values())

    def get(self, identifier: str) -> Attraction | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""

        return self._items.get(identifier)


def build_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(text="üìç –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="menu:attractions")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", callback_data="menu:help")],
        ]
    )


def build_attractions_keyboard(attractions: List[Attraction]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π."""

    buttons = [
        [InlineKeyboardButton(text=item.name, callback_data=f"attraction:{item.identifier}")]
        for item in attractions
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:main")])
    return InlineKeyboardMarkup(buttons)


async def delete_previous_photo(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –µ—Å—Ç—å –≤ —á–∞—Ç–µ."""

    message_id = context.user_data.pop("photo_message_id", None)
    if not message_id:
        return

    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except TelegramError as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: %s", exc)


async def send_main_menu(
    update: Update, context: ContextTypes.DEFAULT_TYPE, *, via_callback: bool = False
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""

    keyboard = build_main_menu_keyboard()
    text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–¶–∏—Ñ—Ä–æ–≤–æ–π –¢–æ—Ä–∂–æ–∫—ä¬ª.\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —É–∑–Ω–∞–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≥–ª–∞–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É."
    ).format(name=update.effective_user.first_name if update.effective_user else "")

    chat = update.effective_chat
    if chat is not None:
        await delete_previous_photo(context, chat.id)

    if via_callback and update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)
        return

    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    await send_main_menu(update, context)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É."""

    help_text = (
        "–ß—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¢–æ—Ä–∂–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.\n"
        "–ö–Ω–æ–ø–∫–∞ ¬´–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏¬ª –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏, –∞ ¬´–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é¬ª ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª."
    )

    if update.message:
        chat = update.effective_chat
        if chat is not None:
            await delete_previous_photo(context, chat.id)
        await update.message.reply_text(help_text, reply_markup=build_main_menu_keyboard())


async def show_attractions(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π."""

    storage: AttractionStorage = context.application.bot_data["storage"]
    attractions = storage.all()

    if not attractions:
        if update.callback_query and update.callback_query.message:
            await update.callback_query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif update.message:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return

    reply_markup = build_attractions_keyboard(attractions)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:"

    chat = update.effective_chat
    if chat is not None:
        await delete_previous_photo(context, chat.id)

    if update.callback_query and update.callback_query.message:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        return

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def attraction_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    query = update.callback_query
    if query is None or query.data is None:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    await query.answer()

    _, _, identifier = query.data.partition(":")
    storage: AttractionStorage = context.application.bot_data["storage"]
    attraction = storage.get(identifier)

    if not attraction:
        await query.edit_message_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
        )
        return

    message_lines = [
        f"<b>{attraction.name}</b>",
        f"–ê–¥—Ä–µ—Å: {attraction.address}",
        "",
        attraction.description,
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ:",
    ]

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=attraction.map_link)],
            [InlineKeyboardButton(text="üöó –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö", url=attraction.route_link)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="menu:attractions")],
        ]
    )

    await query.edit_message_text(
        "\n".join(message_lines),
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )

    if query.message and query.message.chat:
        chat_id = query.message.chat.id
        await delete_previous_photo(context, chat_id)
        photo_message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=attraction.image_url,
            caption=attraction.name,
            parse_mode=ParseMode.HTML,
        )
        context.user_data["photo_message_id"] = photo_message.message_id


async def log_application_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""

    if context.error:
        logger.error(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è %s",
            update,
            exc_info=(type(context.error), context.error, context.error.__traceback__),
        )
    else:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è %s", update)


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    query = update.callback_query
    if query is None or query.data is None:
        return

    await query.answer()
    _, _, action = query.data.partition(":")

    if action == "main":
        if query.message and query.message.chat:
            await delete_previous_photo(context, query.message.chat.id)
        await send_main_menu(update, context, via_callback=True)
    elif action == "attractions":
        await show_attractions(update, context)
    elif action == "help":
        if query.message and query.message.chat:
            await delete_previous_photo(context, query.message.chat.id)
        help_text = (
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n"
            "–í —Ä–∞–∑–¥–µ–ª–µ ¬´–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏¬ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –µ—â—ë —Ä–∞–∑."
        )
        await query.edit_message_text(help_text, reply_markup=build_main_menu_keyboard())


def build_application(storage: AttractionStorage) -> Application:
    """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""

    load_dotenv()
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ bot_data, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    application.bot_data["storage"] = storage

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("attractions", show_attractions))
    application.add_handler(CallbackQueryHandler(handle_menu, pattern=r"^menu:"))
    application.add_handler(CallbackQueryHandler(attraction_details, pattern=r"^attraction:"))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    application.add_error_handler(log_application_error)

    return application


def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""

    base_dir = Path(__file__).resolve().parent
    storage = AttractionStorage.from_json(base_dir / "data" / "attractions.json")
    application = build_application(storage)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == "__main__":
    main()
